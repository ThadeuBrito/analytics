{
  "name": "Analytics",
  "tagline": "",
  "body": "# Analytics.js  [![Status](https://circleci.com/gh/chute/analytics.js.png?circle-token=4279c66ee88214682e1ee342b15f984129b405d8)](https://circleci.com/gh/chute/analytics.js)\r\n\r\n## Getting started\r\n\r\nInstall Analytics.js\r\n\r\n- via Bower:\r\n\r\n  ```bash\r\n  bower install git@github.com:chute/analytics.js.git --save\r\n  ```\r\n\r\n  Then, include it into your project. In AMD-enabled environments:\r\n\r\n  ```js\r\n  require.configure({\r\n    paths: {\r\n      'analytics': 'PATH_TO/analytics'\r\n    }\r\n  });\r\n\r\n  require(['analytics'], function(Analytics) {\r\n    var analytics = new Analytics({\r\n      // default params\r\n    }, {\r\n      // options\r\n    });\r\n    analytics.trigger(...);\r\n  });\r\n  ```\r\n\r\n- for all others:\r\n\r\n  ```html\r\n  <script src=\"//static.getchute.com/js/analytics/1/analytics.min.js\"></script>\r\n  <script>\r\n    var analytics = new Chute.Analytics({\r\n      // default params\r\n    }, {\r\n      // options\r\n    });\r\n    analytics.trigger(...);\r\n  </script>\r\n  ```\r\n\r\nThat's it, now you can use Analytics.js!\r\n\r\n## Available methods\r\n\r\nCheck out [documentation](http://chute.github.io/analytics.js/docs.html).\r\n\r\n\r\n# Contribution guidelines\r\n\r\nIf you would like to contribute, please, do the following:\r\n\r\n1. Clone [chute/analytics.js](https://github.com/chute/analytics.js) repository from GitHub.\r\n2. Create a new branch with an explanationary name, like features/track-something-new.\r\n3. After you are done with the implementation, make sure to write tests for it.\r\n4. Push your branch to the GitHub and create a new pull request describing what you've done.\r\n5. You are responsible for integrating your changes into the master branch.\r\n\r\n## Tests\r\n\r\nAnalytics.js has a complete test coverage. Tests use Jasmine and [Karma](http://karma-runner.github.io/) for running them. To run tests:\r\n\r\n    npm test\r\n\r\nIf you want to run your tests on any of the BrowserStack browsers, add your credentials as env vars:\r\n\r\n    BROWSER_STACK_USERNAME\r\n    BROWSER_STACK_ACCESS_KEY\r\n\r\n## Releasing a version\r\n\r\nWe use [grunt-bump](https://github.com/vojtajina/grunt-bump).\r\nYou should also update `Changelog.md` -- you can generate updates from commits using [grunt-conventional-changelog](https://github.com/btford/grunt-conventional-changelog) (see [conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.em2hiij8p46d)).\r\n\r\nA typical release workflow would be:\r\n\r\n```bash\r\ngrunt bump-only    # (or `bump-only:minor` or `:major`) increase version\r\ngrunt changelog    # generate changelog updates\r\n# edit changelog\r\ngrunt bump-commit  # commit, tag, push\r\n```\r\n\r\nFinally, deploy a new version to CDN:\r\n\r\n```bash\r\ngrunt deploy\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}